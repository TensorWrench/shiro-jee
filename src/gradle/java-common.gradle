/*
 Copyright 2013 TensorWrench, LLC 
 Licensed under the Apache License, Version 2.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 
 http://www.apache.org/licenses/LICENSE-2.0 
 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
 */

/*
 * This file contains the boilerplate build config for Tensorwrench projects.
 * It is shared between projects to make the common elements sharable, while isolating
 * the changing components (depenencies & custom tasks) to the build.gradle file. 
 */
 

apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'emma'
apply plugin: 'eclipse'

version = projectVersion
group = projectGroup
sourceCompatibility = 1.7

//===============================================
// Build Tools
//===============================================


//===============================================
// Dependency info
//===============================================
repositories {
	mavenLocal()
	mavenCentral()
}

configurations {
	provided
}

sourceSets {
	main { compileClasspath += configurations.provided }
}

//===============================================
// Project Overhead
//===============================================
task wrapper(type: Wrapper) { gradleVersion="1.8" }

eclipse.classpath {
	downloadJavadoc = true
	downloadSources = true
	defaultOutputDir = file("$buildDir/build-eclipse")
	plusConfigurations +=configurations.provided
	noExportConfigurations += configurations.provided
}

//===============================================
// Documentation
//===============================================

javadoc {
	source=sourceSets.main.allJava
	destinationDir = reporting.file("javadocs")
	classpath += configurations.provided
}



//==========================================================================
// Artifact Information
//==========================================================================
jar {
	manifest {
		attributes 'Title': rootProject.name,
							 'Version': version,
							 'Build-Date' : new Date(),
							 'Commit' : "git log -1 --format='%H'".execute().text,
							 'Local-files-changed' : 'git status --porcelain'.execute().text.findAll(~/^ ?M/).size(),
							 'Built-by' : System.getProperty("user.name")
	}
}

task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives(sourcesJar)
	archives(javadocJar)
}

signing { sign configurations.archives }

def customizePom(pom) {
	pom.project {
		packaging "jar"
		name projectTitle
		description projectDescription
		url projectGithubUrl
		scm {
			connection "scm:git:${projectGithubUrl}"
			url projectGithubUrl
		}
		developers {
			developer {
				id "jason"
				name "Jason Wagner"
			}
		}
		licenses {
				license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution 'repo'
				}
		}
	}
}

install {
	repositories.mavenInstaller {
		pom.groupId = project.group
		customizePom(pom)
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}

			pom.groupId = project.group
			customizePom(pom)
		}
	}
}